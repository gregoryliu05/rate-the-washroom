version: '3.8'

services:
  # PostgreSQL database with PostGIS
  db:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_DB: rate_the_washroom
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/app/db/init_postgis.sql:/docker-entrypoint-initdb.d/init_postgis.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Backend API
  api:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/rate_the_washroom
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: development
      DEBUG: "true"
    volumes:
      - ./apps/backend:/app
      - uploads_data:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Migration service (run once)
  migrate:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/rate_the_washroom
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head
    profiles:
      - migration

  # Web frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  uploads_data:
